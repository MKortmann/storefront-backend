version: '3'

services:
  db:
    # image: postgres:latest
    build: .
    # maps host machine port 5433 to the container port 5432
    ports:
      - 5433:5432
    # define volumes for persisting data
    volumes:
      # docker create a volume name postgres mounted to /var/lib/postgresql/data
      - postgres:/var/lib/postgresql/data
      # it maps a init.sql file at our host machine to the /docker...
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql #if we want to init with some sql
      # - ./postgres-data:/var/lib/postgresql/data
    # Docker reads the .env file and make it available to the container as it was defined there
    env_file:
      - .env
    # make sure it runs in iteractive mode
    tty: true
    # make sure the pg is ready and if failed, retries after 5 seconds
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    # connected to the custom bridge network: my_network
    networks:
      - my_network

  migration_dev:
    build:
      context: .
    env_file:
      - .env
    # make sure the db is ready before to start the migration
    depends_on:
      db:
        condition: service_healthy
    # maps the migration directory from the host machine to the /migration directory within the container
    volumes:
      - ./migrations:/migrations
    command: bash -c "db-migrate up --config /app/config/database.json -e dev --migrations-dir /migrations"
    networks:
      - my_network

  migration_test:
    build:
      context: .
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    command: bash -c "db-migrate up --config /app/config/database.json -e test --migrations-dir /migrations"
    networks:
      - my_network

  # client:
  #   command: psql -h db -U postgres
  #   env_file:
  #     - .env
  #   tty: true
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   networks:
  #     - my_network

volumes:
  postgres:

networks:
  my_network:
    driver: bridge
